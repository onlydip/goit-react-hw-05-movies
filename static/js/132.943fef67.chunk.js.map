{"version":3,"file":"static/js/132.943fef67.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","components/Service/ApiKey.jsx","components/Search/SearchForm.styled.js","components/Search/SearchForm.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <>\n      <ThreeDots\n        height=\"100\"\n        width=\"100\"\n        radius=\"9\"\n        color=\"blueviolet\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{\n          display: 'flex',\n          justifyContent: 'center',\n        }}\n        visible={true}\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 90px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieListItem = styled.li`\n  text-decoration: none;\n  margin-bottom: 5px;\n`;\n\nexport const MovieListLink = styled(Link)`\n  text-decoration: none;\n  font-size: 18px;\n  color: black;\n  &:hover {\n    color: blueviolet;\n  }\n`;\n\nexport const ImgWrapper = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Poster = styled.img`\n  width: 300px;\n  height: 450px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n  }\n  margin-bottom: 10px;\n`;\n\nexport const Title = styled.p`\n  margin-right: auto;\n  margin-left: auto;\n  font-weight: 500;\n`;\n\nexport const PosterPlug = styled.img`\n  width: 300px;\n  height: 450px;\n  margin-bottom: 10px;\n`;\n","import {\n  MovieListItem,\n  MovieListLink,\n  List,\n  ImgWrapper,\n  Poster,\n  Title,\n  PosterPlug,\n} from './MovieList.styled';\nimport poster_plug from '../../images/poster_plug.jpg';\n\nexport function MovieList({ movies, location }) {\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path }) => (\n        <MovieListItem key={id}>\n          <MovieListLink to={`/movies/${id}`} state={{ from: location }}>\n            <ImgWrapper>\n              {poster_path ? (\n                <Poster\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={title}\n                ></Poster>\n              ) : (\n                <PosterPlug src={poster_plug} alt=\"Poster Plug\"></PosterPlug>\n              )}\n              <Title>{title}</Title>\n            </ImgWrapper>\n          </MovieListLink>\n        </MovieListItem>\n      ))}\n    </List>\n  );\n}\n","import axios from 'axios';\n\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  language: 'en-US',\n  params: {\n    api_key: '633b5eddef52d7ba7f4c5dab163fa70d',\n  },\n});\n\nexport async function getPopularMovies() {\n  const response = await instance.get(`/trending/movie/day`);\n  return response.data.results;\n}\n\nexport async function getMoviesByName(query) {\n  const response = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return response.data.results;\n}\n\nexport async function getMoviesById(id) {\n  const response = await instance.get(`/movie/${id}`);\n  return response.data;\n}\n\nexport function getMovieCredits(id) {\n  const response = instance.get(`/movie/${id}/credits`);\n  return response;\n}\n\nexport function getMovieReviews(id) {\n  const response = instance.get(`/movie/${id}/reviews`);\n  return response;\n}","import styled from 'styled-components';\nimport { Field, Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-bottom: 20px;\n`;\n\nexport const SearchInput = styled(Field)`\n  width: 200px;\n  font-size: 20px;\n  border-radius: 5px;\n  border: 0.5px solid black;\n  outline: none;\n  padding: 5px;\n  margin-right: 10px;\n  ::placeholder {\n    font-size: 16px;\n  }\n`;\n\nexport const SearchButton = styled.button`\n  border: 0.5px solid black;\n  border-radius: 5px;\n  padding: 5px;\n  outline: none;\n  font-size: 20px;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  &:hover,\n  :focus,\n  :active {\n    background-color: skyblue;\n    color: white;\n  }\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 16px;\n  padding: 5px;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport {\n  SearchInput,\n  SearchButton,\n  StyledForm,\n  ErrorText,\n} from './SearchForm.styled';\n\nexport function SearchForm({ onSubmit }) {\n  const schema = yup.object().shape({\n    query: yup.string().required('This field cannot be empty'),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    onSubmit(values);\n    resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ query: '' }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <StyledForm>\n          <SearchInput\n            name=\"query\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n          />\n          <SearchButton type=\"submit\">Search</SearchButton>\n          <ErrorMessage\n            render={message => <ErrorText>{message}</ErrorText>}\n            name=\"query\"\n          />\n        </StyledForm>\n      </Formik>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const MovieWrapper = styled.div`\n  margin-top: 15px;\n  padding: 15px;\n`;\n","import { SearchForm } from '../../components/Search/index';\nimport { useState, useEffect } from 'react';\nimport { getMoviesByName } from '../../components/Service/ApiKey';\nimport { MovieList } from '../../components/MovieList/index';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { MovieWrapper } from './Movies.styled';\nimport { toast } from 'react-toastify';\nimport { Loader } from '../../components/Loader/index';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const name = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (name === '' || name === null) return;\n    async function moviesByName() {\n      try {\n        const response = await getMoviesByName(name);\n        setMovies(response);\n        setIsLoading(false);\n        if (response.length === 0) {\n          toast.error(`Sorry, there are no movies for this request.`);\n        }\n      } catch (error) {\n        toast.error('Oops! Something went wrong!');\n      }\n    }\n    if (name) {\n      moviesByName();\n      setIsLoading(true);\n    }\n  }, [name]);\n\n  const handleMovieNameSubmit = name => {\n    if (name) {\n      setSearchParams(name);\n    }\n  };\n\n  return (\n    <MovieWrapper>\n      <SearchForm onSubmit={handleMovieNameSubmit} />\n      {isLoading && <Loader />}\n      {movies && <MovieList movies={movies} location={location} />}\n    </MovieWrapper>\n  );\n}\n\n\n"],"names":["Loader","height","width","radius","color","ariaLabel","wrapperStyle","display","justifyContent","visible","List","styled","MovieListItem","MovieListLink","Link","ImgWrapper","Poster","Title","PosterPlug","MovieList","movies","location","map","id","title","poster_path","to","state","from","src","alt","poster_plug","instance","axios","baseURL","language","params","api_key","getPopularMovies","get","response","data","results","getMoviesByName","query","getMoviesById","getMovieCredits","getMovieReviews","StyledForm","Form","SearchInput","Field","SearchButton","ErrorText","SearchForm","onSubmit","schema","yup","shape","required","initialValues","validationSchema","values","resetForm","name","type","autoComplete","autoFocus","placeholder","render","message","MovieWrapper","Movies","useState","setMovies","isLoading","setIsLoading","useLocation","useSearchParams","searchParams","setSearchParams","useEffect","length","toast","moviesByName"],"sourceRoot":""}